
- set_fact:
    wc_name: 'wc_{{ image_name }}_{{ ansible_hostname[:-2] }}'
  when: wc_name is not defined

- name: 'Check if WC Exists'
  import_role:
    name: 'fpp_common'
    tasks_from: 'wc_query.yml'
  vars:
    ignore_errors_flag: 'yes'
  delegate_to: '{{ fpp_host }}'
- fail:
    msg: 'Working copy with name {{ wc_name }} already exists. Run again with custom wc_name provided.'
  when: not query_wc_result.stdout | regex_search("does not exist")

- name: 'Set Current GI Home'
  include_role:
    name: 'target_commands'
    tasks_from: 'gihome_path.yml'

- name: 'Get Provided Home For Existing'
  become: 'true'
  become_user: 'root'
  become_method: 'sudo'
  shell:  |
    grep '/{{ gi_home_path }}"' {{ inventory_path }}/ContentsXML/inventory.xml
  register: 'home_path_result'
- set_fact:
    gi_home_path_inventory: '{{ home_path_result.stdout | regex_findall("LOC=.(/.+?). ") | first }}'
  when: home_path_result.stdout != ""
- assert:
    that: gi_home_path_inventory is defined

# If GI Home is not active, then move software only
- set_fact:
    swonly_param: ',swonly'
  when: gi_home_path_inventory != oracle_home

# If GI Home is currently active, then omit swonly
- set_fact:
    swonly_param: ''
  when: gi_home_path_inventory == oracle_home

# TO DO: Finish based on answers to questions

- name: 'Create Working Copy'
  include_role:
    name: 'grid_fpp'
    tasks_from: 'gi_wc_add.yml'
