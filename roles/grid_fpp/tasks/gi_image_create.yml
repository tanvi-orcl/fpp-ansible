- name: 'Assert GI Create Image Variables are defined'
  assert:
    that: version is defined and version_tag is defined
    quiet: 'true'

# Set image name and check if it already exists

- set_fact:
    ru_version_string: '{{ version_tag | regex_replace("\.", "") }}'
# TO EDIT: image_name - GI image naming convention
- set_fact:
    image_name: 'GI{{ ru_version_string }}'
  when: image_name is not defined
- debug: { var: 'image_name' }

- block:
  - name: 'Check if Image {{ image_name }} Exists'
    include_role:
      name: 'fpp_common'
      tasks_from: 'image_query.yml'
    vars:
      ignore_errors_flag: 'yes'
  - fail:
      msg: 'Image with name {{ image_name }} already exists. Run again with custom image_name provided.'
    when: not query_image_result.stdout | regex_search("does not exist")
  delegate_to: '{{ fpp_host }}'

# Sets current active home as oracle home to query for image information

- name: 'Set Current GI Home'
  include_role:
    name: 'target_common'
    tasks_from: 'gihome_info.yml'

- name: 'Assert that oracle_home is defined'
  assert:
    that: oracle_home is defined
    quiet: 'true'

# Zips home, encrypts file, and uploads to container

- name: 'Zip GI Home'
  include_role:
    name: 'target_common'
    tasks_from: 'gihome_zip.yml'

# Creates map file and registers image

- name: 'Create Map File'
  include_tasks: 'gi_image_map.yml'

- name: 'Register Image'
  include_tasks: 'gi_image_register.yml'